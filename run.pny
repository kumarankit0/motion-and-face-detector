# Install required libraries
# pip install opencv-python music21 selenium

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time
import cv2
from music21 import stream, note

def detect_face_and_emotion(frame):
    # Load the pre-trained Haarcascades face and emotion detection classifiers
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    emotion_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_smile.xml')

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))

    # If a face is detected, check for emotions
    if len(faces) > 0:
        for (x, y, w, h) in faces:
            roi_gray = gray[y:y + h, x:x + w]
            emotions = emotion_cascade.detectMultiScale(roi_gray, scaleFactor=1.8, minNeighbors=20)

            # If an emotion (smile) is detected, return the emotion label
            if len(emotions) > 0:
                return 'happy'

    # If no emotion is detected, return a default emotion label
    return 'neutral'

def detect_emotion(frame):
    emotion = detect_face_and_emotion(frame)
    return emotion

def generate_music(emotion):
    # Map emotions to musical elements (you may need to customize this based on your preferences)
    emotion_to_notes = {
        'happy': ['C', 'E', 'G'],
        'sad': ['A', 'D', 'F'],
        'angry': ['D', 'G', 'A'],
        'neutral': ['C', 'E', 'G']
    }

    # Generate a simple melody based on the detected emotion
    melody = stream.Stream()

    for note_name in emotion_to_notes.get(emotion, []):
        n = note.Note(note_name)
        melody.append(n)

    # Convert the melody to MIDI and save it
    midi_path = 'generated_music.mid'
    melody.write('midi', midi_path)
    print(f'Music generated for emotion: {emotion}. MIDI saved to {midi_path}')

def play_music_on_youtube(emotion):
    driver = webdriver.Chrome()

    try:
        driver.get("https://www.youtube.com/")

        # Search for music based on the detected emotion
        search_box = driver.find_element("name", "search_query")
        search_box.send_keys(f"music for {emotion} emotion")
        search_box.send_keys(Keys.RETURN)

        # Wait for search results to load
        time.sleep(2)

        # Click on the first video in the search results
        first_video = driver.find_element("id", "video-title")
        

        # Wait for the video to load
        time.sleep(5)  # Adjust the wait time based on your internet speed

    except Exception as e:
        print(f"An error occurred: {e}")

    finally:
        # Close the browser window
        driver.quit()

def main():
    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()
        emotion = detect_emotion(frame)
        generate_music(emotion)
        cv2.imshow('Frame', frame)

        if emotion != 'neutral':
            play_music_on_youtube(emotion)
            break

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
